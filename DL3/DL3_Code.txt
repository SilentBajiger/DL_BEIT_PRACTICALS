import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense , Conv2D ,Dropout,Flatten,MaxPooling2D
import matplotlib.pyplot as plt
import numpy as np

mnist = tf.keras.datasets.mnist
(x_train,y_train),(x_test,y_test) = mnist.load_data()
input_shape = (28,28,1)

x_train = x_train.reshape(x_train.shape[0],28,28,1)
x_test = x_test.reshape(x_test.shape[0],28,28,1)

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')

x_train = x_train / 255;
x_test = x_test / 255;
print("shape of Training :",x_train.shape)
print("shape of Testing :",x_test.shape)

model = Sequential([
    Conv2D(28,kernel_size=(3,3), input_shape = input_shape),
    MaxPooling2D(pool_size = (2,2)),
    Flatten(),
    Dense(200,activation = "relu"),
    Dropout(0.3),
    Dense(10,activation = "softmax")
])

model.summary()

model.compile(optimizer="adam",loss="sparse_categorical_crossentropy",metrics=["accuracy"])

history = model.fit(x_train,y_train,epochs=5)

test_loss , test_acc = model.evaluate(x_test,y_test)
print("loss = %.3f"%test_loss)
print("accuracy = %.3f"%test_acc)

image = x_train[90]
plt.imshow(np.squeeze(image),cmap="gray")
plt.show()

image = image.reshape(1,image.shape[0],image.shape[1],image.shape[2])
predict_model = model.predict([image])
print("predicted class : {} ".format(np.argmax(predict_model)))


## upto this is enough

plt.plot(history.history['accuracy'])
# plt.plot(history.history['loss'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['Train','Validation'],loc = 'upper right')
plt.show()

